=== tests/cases/compiler/sourceMapValidationDestructuringParameterArrayBindingPattern2.ts ===
declare var console: {
>console : Symbol(console, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 11))

    log(msg: any): void;
>log : Symbol(log, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 22))
>msg : Symbol(msg, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 1, 8))
}
type Robot = [string, [string, string]];
>Robot : Symbol(Robot, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 2, 1))

var robotA: Robot = ["trimmer", ["trimming", "edging"]];
>robotA : Symbol(robotA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 4, 3))
>Robot : Symbol(Robot, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 2, 1))

function foo1([, skillA]: Robot) {
>foo1 : Symbol(foo1, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 4, 56))
>skillA : Symbol(skillA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 6, 16))
>Robot : Symbol(Robot, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 2, 1))

    console.log(skillA);
>console.log : Symbol(log, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 22))
>console : Symbol(console, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 11))
>log : Symbol(log, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 22))
>skillA : Symbol(skillA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 6, 16))
}

function foo2([nameMB]: Robot) {
>foo2 : Symbol(foo2, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 8, 1))
>nameMB : Symbol(nameMB, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 10, 15))
>Robot : Symbol(Robot, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 2, 1))

    console.log(nameMB);
>console.log : Symbol(log, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 22))
>console : Symbol(console, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 11))
>log : Symbol(log, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 22))
>nameMB : Symbol(nameMB, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 10, 15))
}

function foo3([nameMA, [primarySkillA, secondarySkillA]]: Robot) {
>foo3 : Symbol(foo3, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 12, 1))
>nameMA : Symbol(nameMA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 14, 15))
>primarySkillA : Symbol(primarySkillA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 14, 24))
>secondarySkillA : Symbol(secondarySkillA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 14, 38))
>Robot : Symbol(Robot, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 2, 1))

    console.log(nameMA);
>console.log : Symbol(log, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 22))
>console : Symbol(console, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 11))
>log : Symbol(log, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 22))
>nameMA : Symbol(nameMA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 14, 15))
}

function foo4([...multiRobotAInfo]: Robot) {
>foo4 : Symbol(foo4, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 16, 1))
>multiRobotAInfo : Symbol(multiRobotAInfo, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 18, 15))
>Robot : Symbol(Robot, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 2, 1))

    console.log(multiRobotAInfo);
>console.log : Symbol(log, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 22))
>console : Symbol(console, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 11))
>log : Symbol(log, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 0, 22))
>multiRobotAInfo : Symbol(multiRobotAInfo, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 18, 15))
}

foo1(robotA);
>foo1 : Symbol(foo1, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 4, 56))
>robotA : Symbol(robotA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 4, 3))

foo1(["Roomba", ["vaccum", "mopping"]]);
>foo1 : Symbol(foo1, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 4, 56))

foo2(robotA);
>foo2 : Symbol(foo2, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 8, 1))
>robotA : Symbol(robotA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 4, 3))

foo2(["Roomba", ["vaccum", "mopping"]]);
>foo2 : Symbol(foo2, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 8, 1))

foo3(robotA);
>foo3 : Symbol(foo3, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 12, 1))
>robotA : Symbol(robotA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 4, 3))

foo3(["Roomba", ["vaccum", "mopping"]]);
>foo3 : Symbol(foo3, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 12, 1))

foo4(robotA);
>foo4 : Symbol(foo4, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 16, 1))
>robotA : Symbol(robotA, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 4, 3))

foo4(["Roomba", ["vaccum", "mopping"]]);
>foo4 : Symbol(foo4, Decl(sourceMapValidationDestructuringParameterArrayBindingPattern2.ts, 16, 1))

