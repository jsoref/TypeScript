=== tests/cases/compiler/emitMemberAccessExpression_file3.ts ===
/// <reference path="emitMemberAccessExpression_file2.ts" />
/// <reference path="emitMemberAccessExpression_file1.ts" />
declare var OData: any;
>OData : any

module Microsoft.PeopleAtWork.Model {
>Microsoft : typeof Microsoft
>PeopleAtWork : typeof PeopleAtWork
>Model : typeof Model

    export class KnockoutExtensions {
>KnockoutExtensions : KnockoutExtensions
    }
}
=== tests/cases/compiler/emitMemberAccessExpression_file1.ts ===
/// <reference path="emitMemberAccessExpression_file3.ts" />
"use strict";
>"use strict" : string

=== tests/cases/compiler/emitMemberAccessExpression_file2.ts ===
/// <reference path="emitMemberAccessExpression_file3.ts" />
"use strict";
>"use strict" : string

module Microsoft.PeopleAtWork.Model {
>Microsoft : typeof Microsoft
>PeopleAtWork : typeof PeopleAtWork
>Model : typeof Model

    export class _Person {
>_Person : _Person

        public populate(raw: any) {
>populate : (raw: any) => void
>raw : any

            var res = Model.KnockoutExtensions;
>res : typeof KnockoutExtensions
>Model.KnockoutExtensions : typeof KnockoutExtensions
>Model : typeof Model
>KnockoutExtensions : typeof KnockoutExtensions
        }
    }
}

