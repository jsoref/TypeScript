=== tests/cases/compiler/bestCommonTypeWithContextualTyping.ts ===
interface Contextual {
>Contextual : Contextual

    dummy;
>dummy : any

    p?: number;
>p : number
}

interface Element {
>Element : Element

    dummy;
>dummy : any

    p: any;
>p : any
}

var e: Element;
>e : Element
>Element : Element

// All of these should pass. Neither type is a supertype of the other, but the RHS should
// always use Element in these examples (not Contextual). Because Element is assignable
// to Contextual, no errors.
var arr: Contextual[] = [e]; // Element[]
>arr : Contextual[]
>Contextual : Contextual
>[e] : Element[]
>e : Element

var obj: { [s: string]: Contextual } = { s: e }; // { s: Element; [s: string]: Element }
>obj : { [s: string]: Contextual; }
>s : string
>Contextual : Contextual
>{ s: e } : { s: Element; }
>s : Element
>e : Element

var conditional: Contextual = null ? e : e; // Element
>conditional : Contextual
>Contextual : Contextual
>null ? e : e : Element
>null : null
>e : Element
>e : Element

var contextualOr: Contextual = e || e; // Element
>contextualOr : Contextual
>Contextual : Contextual
>e || e : Element
>e : Element
>e : Element

